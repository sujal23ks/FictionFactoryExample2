@model FictionFactoryExample2.Models.DrawingsEntity

@{
    ViewData["Title"] = "Details";
}

<h1>Details</h1>

<div>
    <h4>DrawingsEntity</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model._id)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model._id)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Name)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Name)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Box_Hori_Count)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Box_Hori_Count)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Width_row)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Width_row)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Depth_row)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Depth_row)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Box_Vert_Count)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Box_Vert_Count)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Width_col)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Width_col)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Height_Col)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Height_Col)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Box_Back_Count)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Box_Back_Count)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Width_bk)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Width_bk)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Height_bk)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Height_bk)
        </dd>
    </dl>
</div>
<div>
    @Html.ActionLink("Edit", "Edit", new { /* id = Model.PrimaryKey */ }) |
    <a asp-action="Index">Back to List</a>
</div>

<div id="drawing"></div>

<script src="https://unpkg.com/konva@8/konva.min.js"></script>


<script>

    var model = '@Model.Height_bk'

    var row_width = '@Model.Width_row'

    var row_height = '@Model.Depth_row'

    var row_width = '@Model.Width_row'

    var col_width = '@Model.Width_col'

    var col_height = '@Model.Height_Col'

    var bk_width = '@Model.Width_bk'

    var bk_height = '@Model.Height_bk'




    console.log(model)

    var width = window.innerWidth;
    var height = window.innerHeight;

    var stage = new Konva.Stage({
        container: 'drawing',
        width: width,
        height: height,
    });

    var layer = new Konva.Layer();

    var rect1 = new Konva.Rect({
        x: 20,
        y: 20,
        width: row_width,
        height: row_height,
        fill: 'white',
        stroke: 'black',
       // strokeWidth: 4,
    });
    // add the shape to the layer
    layer.add(rect1);

    var rect2 = new Konva.Rect({
        x: 150,
        y: 400,
        width: col_width,
        height: col_height,
        fill: 'white',
        stroke: 'black',
      //  shadowBlur: 10,
      //  cornerRadius: 10,
    });
    layer.add(rect2);

    var rect3 = new Konva.Rect({
        x: 500,
        y: 120,
        width: bk_width,
        height: bk_height,
        fill: 'white',
        stroke:'black',
        //cornerRadius: [0, 10, 20, 30],
    });
    layer.add(rect3);

    // add the layer to the stage
    stage.add(layer);

</script>



